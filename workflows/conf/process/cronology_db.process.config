process {
    if (params.dpubmlstpy_run) {
        withName: 'DOWNLOAD_PUBMLST_SCHEME' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}dpubmlstpy.nf").dpubmlstpyHelp(params).helpparams
            )
        }
    }

    if (params.checkm2predict_run) {
        withName: 'CHECKM2_PREDICT' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}checkm2predict.nf").checkm2predictHelp(params).helpparams
            )
        }
    }

    if (params.guncrun_run) {
        withName: 'GUNC_RUN' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}guncrun.nf").guncrunHelp(params).helpparams
            )
        }
    }

    if (params.mlst_run) {
        withName: 'MLST' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}mlst.nf").mlstHelp(params).helpparams
            )
        }
    }

    if (params.mashsketch_run) {
        withName: 'MASH_SKETCH' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}mashsketch.nf").mashsketchHelp(params).helpparams
            )
        }
    }
}

// Method to instantiate a new function parser
// Need to refactor using ScriptParser... another day
def loadThisFunction (func_file) {
    GroovyShell grvy_sh = new GroovyShell()
    def func = grvy_sh.parse(new File ( func_file ) )
    return func
}

// Method to add relevant final parameters to summary log
def addParamsToSummary(Map params_to_add = [:]) {

    if (!params_to_add.isEmpty()) {
        def not_null_params_to_add = params_to_add.findAll {
            it.value.clivalue != null && 
                it.value.clivalue != '[:]' &&
                it.value.clivalue != ''
        }

        params.logtheseparams += not_null_params_to_add.keySet().toList()

        return not_null_params_to_add.collect {
            "${it.value.cliflag} ${it.value.clivalue.toString().replaceAll(/(?:^\s+|\s+$)/, '')}"
        }.join(' ').trim()
    }
    return 1
}