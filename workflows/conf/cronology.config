params {
    workflow_conceived_by = 'Kranti Konganti'
    workflow_built_by = 'Kranti Konganti'
    workflow_version = '0.1.0'
    ref_acc =  'GCF_003516125'
    cronology_root_dbdir = '/tmp'
    dpubmlstpy_run = true
    dpubmlstpy_org = 'cronobacter'
    dpubmlstpy_mlsts = 'schemes/1'
    dpubmlstpy_profile = false
    dpubmlstpy_loci = false
    dpubmlstpy_suffix = false
    dpubmlstpy_akey = false
    dpubmlstpy_id = false
    fastp_run = true
    fastp_failed_out = false
    fastp_merged_out = false
    fastp_overlapped_out = false
    fastp_6 = false
    fastp_reads_to_process = 0 
    fastp_fix_mgi_id = false
    fastp_A = false
    fastp_f = 0
    fastp_t = 0
    fastp_b = 0
    fastp_F = 0
    fastp_T = 0
    fastp_B = 0
    fastp_dedup = true
    fastp_dup_calc_accuracy = 6
    fastp_poly_g_min_len = 10
    fastp_G = true
    fastp_x = false
    fastp_poly_x_min_len = 10 
    fastp_cut_front = true
    fastp_cut_tail = false
    fastp_cut_right = true
    fastp_W = 20
    fastp_M = 30
    fastp_q = 30
    fastp_u = 40
    fastp_n = 5
    fastp_e = 0
    fastp_l = 35
    fastp_max_len = 0
    fastp_y = true
    fastp_Y = 30
    fastp_U = false
    fastp_umi_loc = false
    fastp_umi_len = false
    fastp_umi_prefix = false
    fastp_umi_skip = false
    fastp_p = true
    fastp_P = 20
    fastp_use_custom_adapters = false
    fastp_adapter_fasta = (params.fastp_use_custom_adapters ? "${projectDir}"
        + File.separator
        + 'assets'
        + File.separator
        + 'adaptors.fa' : false)
    mashscreen_w = false
    mashscreen_i = false
    mashscreen_v = false
    tuspy_run = true
    tuspy_s = false
    tuspy_m = false
    tuspy_ps = (params.cronology_root_dbdir
        + File.separator
        + 'index_pdg_metadata' 
        + File.separator
        + 'IDXD_PDG_METAD.pickle')
    tuspy_gd = (params.cronology_root_dbdir 
        + File.separator 
        + 'scaffold_genomes')
    tuspy_gds = '_scaffolded_genomic.fna.gz'
    tuspy_n = 5
    spades_run = false
    spades_isolate = false
    spades_sc = false
    spades_meta = true
    spades_bio = false
    spades_corona = false
    spades_rna = false
    spades_plasmid = false
    spades_metaviral = false
    spades_metaplasmid = false
    spades_rnaviral = false
    spades_iontorrent = false
    spades_only_assembler = false
    spades_careful = false
    spades_cov_cutoff = false
    spades_k = false
    spades_hmm = false
    shovill_run = true
    shovill_depth = 150
    shovill_gsize = false
    shovill_minlen = 200
    shovill_mincov = 5
    shovill_namefmt = false
    shovill_keepfiles = false
    shovill_assembler = false
    shovill_opts = false
    shovill_kmers = false
    shovill_trim = false
    shovill_noreadcorr = false
    shovill_nostitch = false
    shovill_nocorr = false
    polypolish_run = true
    polypolish_d = 5
    polypolish_i = 0.2
    polypolish_m = 10
    polypolish_v = 0.5
    mashtree_run = true
    mashtree_fofn = true
    mashtree_trunclength = false
    mashtree_mindepth = false
    mashtree_kmerlength = false
    mashtree_sketchsize = false 
    mashtree_seed = false
    mashtree_genomesize = false
    mashtree_sigfigs = false
    mashtree_sortorder = false
    quast_run = true
    quast_min_contig = 200
    quast_split_scaffolds = false
    quast_euk = false
    quast_fungal = false
    quast_large = false
    quast_k = false
    quast_kmer_size = false 
    quast_circos = true
    quast_glimmer = true
    quast_gene_thr = '0,300,1500,3000'
    quast_rna_finding = true
    quast_ref_size = false
    quast_ctg_thr = '0,1000,5000,10000,25000,50000'
    quast_x_for_nx = 90
    quast_use_all_alns = false
    quast_min_alignment = 65
    quast_min_identity = '95.0'
    quast_ambig_usage = 'one'
    quast_ambig_score = '0.99'
    quast_strict_na = false
    quast_x = 1000
    quast_local_mis_size = 200 
    quast_sca_gap_size = 10000
    quast_unaln_part_size = 500
    quast_skip_unaln_mis_ctgs = false
    quast_fragmented = false
    quast_frag_max_ident = (params.quast_fragmented ? 200 : false)
    quast_plots_format = 'pdf'
    prodka_run = true
    prodigal_run = (params.prodka_run ?: false)
    prodigal_c = false
    prodigal_f = 'gbk'
    prodigal_g = 11
    prodigal_m = true
    prodigal_n = false
    prodigal_p = 'single'
    prodigal_t = true
    prokka_run = (params.prodka_run ?: false)
    prokka_dbdir = false
    prokka_addgenes = true
    prokka_addmrna = true
    prokka_locustag = false
    prokka_increment = false
    prokka_gffver = false
    prokka_compliant = true
    prokka_centre = 'CFSAN-FDA'
    prokka_accver = false
    prokka_genus = (params.dpubmlstpy_org.capitalize() ?: 'Cronobacter')
    prokka_species = false
    prokka_strain = false
    prokka_plasmid = false
    prokka_kingdom = false
    prokka_gcode = false
    prokka_usegenus = true
    prokka_metagenome = false
    prokka_rawproduct = false
    prokka_cdsrnaolap = false
    prokka_evalue = '1e-9'
    prokka_coverage = 80
    prokka_fast = false
    prokka_noanno = false
    prokka_mincontiglen = 200 
    prokka_rfam = false
    prokka_norrna = false
    prokka_notrna = false
    prokka_rnammer = false
    pirate_run = false
    pirate_steps = false
    pirate_features = false 
    pirate_nucl = false
    pirate_pan_opt = "'--diamond'"
    pirate_pan_off = false
    pirate_min_len = 200
    pirate_para_off = false
    pirate_para_args = false
    pirate_classify_off = false
    pirate_align = false
    pirate_rplots = false
    mashscreen_run = true
    mash_sketch = (params.cronology_root_dbdir
        + File.separator 
        + 'mash_paste' 
        + File.separator 
        + 'msh.k21.1000h.' 
        + getPDGRelease(params.cronology_root_dbdir)
        + '.msh')
    mlst_run = true
    mlst_scheme = (params.dpubmlstpy_org ?: 'cronobacter')
    mlst_legacy = true
    mlst_minid = 95
    mlst_mincov = 10
    mlst_minscore = 50
    mlst_blastdb = false
    mlst_datadir = false
    mlst_label = true
    abricate_run = true
    abricate_datadir = ("${projectDir}"
        + File.separator
        + 'assets'
        + File.separator
        + 'abricate_dbs')
    abricate_minid = 90
    abricate_mincov = 80
    abricate_summary_run = true
    fq_filter_by_len = 0
    fq_suffix = (params.fq_single_end ? '.fastq.gz' : '_R1_001.fastq.gz')
    fq2_suffix = '_R2_001.fastq.gz'
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    METHOD TO GET PDG RELEASE AND SET REST OF THE METADATA FILES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

def getPDGRelease(db_path) {
	db_path_obj = new File( db_path )
	def pdg_release = []

	db_path_obj.eachDirRecurse {
		it.toString() =~ /PDG/ \
            ? pdg_release << it.toString().find(/PDG\d+\.\d+/) \
            : null
	}

	return pdg_release.unique().join('').toString()
}
